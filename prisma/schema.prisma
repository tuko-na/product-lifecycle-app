// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザーモデル (NextAuth.jsで必要になる項目を含む)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 製品とのリレーション (ユーザーが複数の製品を持つ)
  products Product[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 製品モデル
model Product {
  id              String    @id @default(cuid())
  name            String
  modelNumber     String?
  purchaseDate    DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  userId          String
  user            User      @relation(fields: [userId], references: [id])

  usageLogs       UsageLog[]
  incidentReports IncidentReport[]

  category              String?
  manufacturer          String?
  warrantyMonths        Int?
  expectedLifespanYears Int?
  notes                 String?
  purchasePrice         Decimal?
  imageUrl              String?
  manualUrl             String?

  expectedUsageHours    Int?      // 期待する総使用時間 (時間単位)
}

model UsageLog {
  id        String   @id @default(cuid())
  date      DateTime // 使用日
  notes     String? // 使用に関するメモ (例: 「強風モードで5分」など)
  duration  Int? // 使用時間（分など、任意）
  // type      String?  // 使用タイプ (例: "通常使用", "メンテナンス", "清掃"など、任意)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String // どの製品に対する使用履歴か
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade) // Productへのリレーション
}

// 新しい IncidentReport モデル
model IncidentReport {
  id          String   @id @default(cuid())
  date        DateTime // インシデント発生日
  description String   // インシデントの内容やレビュー詳細
  severity    String?  // 重要度 (例: "軽微な問題", "主要な不具合", "故障", "高評価点", "改善要望" など、任意)
  // photoUrl    String?  // 写真のURL (将来的に実装する場合)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  productId   String   // どの製品に対するインシデントか
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade) // Productへのリレーション
}
